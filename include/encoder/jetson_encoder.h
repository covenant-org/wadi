#include "api/video/video_bitrate_allocation.h"
#include "api/video/video_frame.h"
#include "api/video/video_frame_type.h"
#include "api/video_codecs/sdp_video_format.h"
#include "api/video_codecs/video_codec.h"
#include "api/video_codecs/video_encoder.h"
#include "api/video_codecs/video_encoder_factory.h"
#include "encoder/video_encode.h"
#include <memory>

class JetsonEncoderFactory : public webrtc::VideoEncoderFactory {
  std::vector<webrtc::SdpVideoFormat> GetSupportedFormats() const override;

  // Returns information about how this format will be encoded. The specified
  // format must be one of the supported formats by this factory.
  // TODO(magjed): Try to get rid of this method.
  CodecInfo
  QueryVideoEncoder(const webrtc::SdpVideoFormat &format) const override;

  // Creates a VideoEncoder for the specified format.
  std::unique_ptr<webrtc::VideoEncoder>
  CreateVideoEncoder(const webrtc::SdpVideoFormat &format) override;

  ~JetsonEncoderFactory() {}
};

class JetsonEncoder : public webrtc::VideoEncoder {
public:
  context_t ctx;
  JetsonEncoder();
  ~JetsonEncoder() {}

  void SetDefaults();

  // Initialize the encoder with the information from the codecSettings
  //
  // Input:
  //          - codec_settings    : Codec settings
  //          - number_of_cores   : Number of cores available for the encoder
  //          - max_payload_size  : The maximum size each payload is allowed
  //                                to have. Usually MTU - overhead.
  //
  // Return value                  : Set bit rate if OK
  //                                 <0 - Errors:
  //                                  WEBRTC_VIDEO_CODEC_ERR_PARAMETER
  //                                  WEBRTC_VIDEO_CODEC_ERR_SIZE
  //                                  WEBRTC_VIDEO_CODEC_MEMORY
  //                                  WEBRTC_VIDEO_CODEC_ERROR
  int32_t InitEncode(const webrtc::VideoCodec *codec_settings,
                     int32_t number_of_cores, size_t max_payload_size) override;

  // Register an encode complete callback object.
  //
  // Input:
  //          - callback         : Callback object which handles encoded images.
  //
  // Return value                : WEBRTC_VIDEO_CODEC_OK if OK, < 0 otherwise.
  int32_t RegisterEncodeCompleteCallback(
      webrtc::EncodedImageCallback *callback) override;

  // Free encoder memory.
  // Return value                : WEBRTC_VIDEO_CODEC_OK if OK, < 0 otherwise.
  int32_t Release() override;

  // Encode an I420 image (as a part of a video stream). The encoded image
  // will be returned to the user through the encode complete callback.
  //
  // Input:
  //          - frame             : Image to be encoded
  //          - frame_types       : Frame type to be generated by the encoder.
  //
  // Return value                 : WEBRTC_VIDEO_CODEC_OK if OK
  //                                <0 - Errors:
  //                                  WEBRTC_VIDEO_CODEC_ERR_PARAMETER
  //                                  WEBRTC_VIDEO_CODEC_MEMORY
  //                                  WEBRTC_VIDEO_CODEC_ERROR
  int32_t
  Encode(const webrtc::VideoFrame &frame,
         const std::vector<webrtc::VideoFrameType> *frame_types) override;
  // TODO(bugs.webrtc.org/10379): Deprecated. Delete, and make above method pure
  // virtual, as soon as downstream applications are updated.
  int32_t
  Encode(const webrtc::VideoFrame &frame,
         const webrtc::CodecSpecificInfo *codec_specific_info,
         const std::vector<webrtc::VideoFrameType> *frame_types) override;

  // Inform the encoder about the new target bit rate.
  //
  // Input:
  //          - bitrate         : New target bit rate
  //          - framerate       : The target frame rate
  //
  // Return value                : WEBRTC_VIDEO_CODEC_OK if OK, < 0 otherwise.
  int32_t SetRates(uint32_t bitrate, uint32_t framerate) override;

  // Default fallback: Just use the sum of bitrates as the single target rate.
  // TODO(sprang): Remove this default implementation when we remove SetRates().
  int32_t SetRateAllocation(const webrtc::VideoBitrateAllocation &allocation,
                            uint32_t framerate) override;

  // Inform the encoder when the packet loss rate changes.
  //
  // Input:   - packet_loss_rate  : The packet loss rate (0.0 to 1.0).
  void OnPacketLossRateUpdate(float packet_loss_rate) override;

  // Inform the encoder when the round trip time changes.
  //
  // Input:   - rtt_ms            : The new RTT, in milliseconds.
  void OnRttUpdate(int64_t rtt_ms) override;

  // Returns meta-data about the encoder, such as implementation name.
  // The output of this method may change during runtime. For instance if a
  // hardware encoder fails, it may fall back to doing software encoding using
  // an implementation with different characteristics.
  EncoderInfo GetEncoderInfo() const override;
};

std::unique_ptr<webrtc::VideoEncoderFactory> CreateJetsonEncoderFactory();
